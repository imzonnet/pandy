//GLOBAL VARS
var CALC_NAME = 'Mortgage switching';

$(document).ready(function() {

    //Draw calculator framework
    var init = DrawCalculator();
    //add the options to selects
    var html = '<option value="52">Weekly</option><option value="26">Fortnightly</option>'+
        '<option value="12" selected="selected">Monthly</option><option value="1">Annually</option>';
    $('#calculator-container .input select').html(html);
    //add the labels for each field
    $( '#calculator-container .input .current input, #calculator-container .input .current select' ).each(function() {
        $(this).before( '<label>Current loan - '+$(this).parent('p').prev('p').text()+'</label>' );
    });
    $( '#calculator-container .input .new input, #calculator-container .input .new select' ).each(function() {
        $(this).before( '<label>New loan - '+$(this).parent('p').prev('p').prev('p').text()+'</label>' );
    });

    $('#calculator-container input').attr('type', 'tel'); // change all inputs to type=tel

    //blur on enter key
    $('input').on('keypress', function (e) { if ( e.keyCode == 13 ){ $(this).blur(); } });

    $('#calculator-container input').focus(function () { this.select(); });
    $('#calculator-container input').mouseup(function(e){ e.preventDefault(); });
    $('#calculator-container input').blur(function () {
        if (this.value.length < 1 ) { $(this).val(0); }
        if ( $(this).hasClass('dollars') ) { $(this).val( this.value.toFloat().formatMoney(0) ); }
        if ( $(this).hasClass('interest') ) {
            var r = $(this).val().toFloat();
            if ( r > 15 ) { r = 15; }
            $(this).val( r.toFixed(2) + '%' );
        }
        if ( $(this).hasClass('years') ) { $(this).val(  parseInt(this.value) + ' years' ); }
        if ( this.id == 'nper' ) { if ( getVal('#nper') > 30 ) { $(this).val('30 years'); } }
        if ( this.id == 'newIntroNper' ) { if ( getVal('#nper') <= getVal('#newIntroNper') ) { $(this).val( getVal('#nper')-1+' years'); } }
        calculate();
    });
    $('#calculator-container select, #calculator-container input[type="checkbox"]').change(function(){ calculate(); });
    $('input.int').keyup(function () { this.value = this.value.replace(/[^0-9]/g,''); }); //full numbers only
    $('input.float').keyup(function () { this.value = this.value.replace(/[^0-9\.]/g,''); }); //decimal numbers

    //validation
    $('#calculator-container input').focus(function () { this.select(); $(this).removeClass('empty'); });

    //$('.toggle a').on("click", function(event) { $('.toggle a').toggleClass('active'); calculate(); });

    $('#result button').on("click", function(event) { $('#result table').slideToggle(); });

});

//CALCULATIONS
function calculate(){
    if ( $('input.empty').length > 0 ) { return false; }
    // current loan vars
    var pv = getVal('#pv');
    var rate = getVal('#rate')/100;
    var nper = getVal('#nper');
    var pmtFreq = getVal('#pmtFreq');
    var fee = getVal('#fee');
    var feeFreq = getVal('#feeFreq');
    var feeTermination = getVal('#feeTermination');
    var introNper = 0; // no introductory period for existing loan
    // new loan vars
    var feeApplication = getVal('#feeApplication');
    var feeSwitching = getVal('#feeSwitching');
    var newFee = getVal('#newFee');
    var newFeeFreq = getVal('#newFeeFreq');
    var newIntroRate = getVal('#newIntroRate')/100;
    var newIntroNper = getVal('#newIntroNper');
    var newRate = getVal('#newRate')/100;
    var newNper = nper - newIntroNper;
    var totalSwitchingFees = feeTermination + feeApplication + feeSwitching;
    // generic vars
    var fv = 0;
    var type = 0;
    var html;
    var period = $('#pmtFreq option:selected').text().toLowerCase().replace('ly','s');
    var chartPmt = false; // set to true to chart data based on existing repayments

    //calculate current loan payment
    var pmt = PMT(rate/pmtFreq, nper*pmtFreq, -pv, fv, type) + ( (fee*feeFreq)/pmtFreq );
    var totalCost = pmt * nper * pmtFreq; // total cost including interest and fees
    // pmtFreq :: 1 year is 1, monthly is 12, weekly is 52, etc

    //calculate new loan payment
    var newPv = pv + totalSwitchingFees; // present value of new loan once fees are added
    var newIntroPmt = PMT(newIntroRate/pmtFreq, nper*pmtFreq, -newPv, fv, type) + ( (newFee*newFeeFreq)/pmtFreq ); // honeymoon payment amount
    var newPvAfterIntro = FV(newIntroRate/pmtFreq, newIntroNper*pmtFreq, newIntroPmt-( (newFee*newFeeFreq)/pmtFreq ), -newPv, type); //present value of loan after honeymoon period
    var newPmt = PMT(newRate/pmtFreq, newNper*pmtFreq, -newPvAfterIntro, fv, type) + ( (newFee*newFeeFreq)/pmtFreq ); // ongoing payment amount
    var newTotalCost = (newIntroPmt * newIntroNper * pmtFreq) + (newPmt * (nper-newIntroNper) * pmtFreq); // total cost including interest and fees
    var recoverSwitchCosts = 0;
    if ( newIntroNper > 0 ) {
        for (i = 1; i <= newIntroNper*pmtFreq; i++) {
            if ( (i*pmt) - (i*newIntroPmt) >= totalSwitchingFees ) {
                recoverSwitchCosts = i;
                break;
            }
        }
    }
    if ( recoverSwitchCosts === 0 ) {
        for (i = 1; i <= newNper*pmtFreq; i++) {
            if ( (i*pmt) - (i*newPmt) >= totalSwitchingFees ) { recoverSwitchCosts = newIntroNper*pmtFreq + i; break; }
        }
    }
    if ( ( totalCost-newTotalCost-totalSwitchingFees ) <= 0 ) {
        recoverSwitchCosts = 'negative';
    }
    else if ( totalSwitchingFees > 0 ) {
        if ( recoverSwitchCosts === 0 ) { recoverSwitchCosts = 'fee not recovered'; }
        else { recoverSwitchCosts = recoverSwitchCosts +' '+period; }
    }
    else { recoverSwitchCosts = 'N/A'; }

    // calculate new loan maintaining existing payment
    var newPmtCurrent = PMT(newIntroRate/pmtFreq, nper*pmtFreq, -newPv, fv, type) + ( (newFee*newFeeFreq)/pmtFreq ); // honeymoon payment amount
    if ( newPmtCurrent < pmt ) { newPmtCurrent = pmt; }
    var newPvAfterIntroMaintain = FV(newIntroRate/pmtFreq, newIntroNper*pmtFreq, newPmtCurrent, -newPv, type); // future value of loan at the end of honeymoon period
    var newPmtCurrentAfterIntro = PMT(newRate/pmtFreq, nper*pmtFreq, -newPvAfterIntroMaintain, fv, type) + ( (newFee*newFeeFreq)/pmtFreq ); // payment amount after honeymoon
    if ( newPmtCurrentAfterIntro < pmt ) { newPmtCurrentAfterIntro = pmt; }
    var newNperHigher = NPER(newRate/pmtFreq, newPmtCurrentAfterIntro, -newPvAfterIntroMaintain, fv, type); // how long will it take to pay off the loan after the honeymoon period
    newNperHigher = newNperHigher + newIntroNper * pmtFreq;
    var repayYears = parseInt(newNperHigher.toFixed(6)/pmtFreq);
    var repayTerm = repayYears + ' years';
    var repayMonths = Math.ceil( (newNperHigher.toFixed(6)/pmtFreq % 1)* 12 );
    if ( repayMonths > 0 ) { repayTerm = repayTerm + ' ' + repayMonths + ' months'; }
    if (repayMonths === 12) { repayYears = repayYears+1; repayMonths = 0;  }
    var newTotalCostHigher = (newPmtCurrent * newIntroNper * pmtFreq) + (newPmtCurrentAfterIntro * (newNperHigher-newIntroNper*pmtFreq) ); // total cost including interest and fees

    var newPmtMaintain = pmt;
    if ( newPmtMaintain <  newPmt ) { newPmtMaintain =  newPmt; }


    var assumptions = '<p class="assumptions breaker"><strong>Assumptions:</strong></p><ul class="assumptions"><li>Total cost of current loan: '+totalCost.formatMoney(2)+' ('+pmt.formatMoney()+' per '+pmtFreq.periodText()+')</li>'+
        '<li>Total cost of new loan: '+newTotalCost.formatMoney(2)+' ('+newIntroPmt.formatMoney()+' introductory and '+newPmt.formatMoney()+' ongoing per '+pmtFreq.periodText()+')</li></ul>';

    // build chart array data
    var currentLoan = []; currentLoan[0] = 0;
    var newLoan = []; newLoan[0] = 0;
    var cost = []; cost[0] = 0;

    // calculate graph based on maintaining existing repayments
    if ( chartPmt ) {
        newPmt = newPmtMaintain;
        currentLoan[0] = pv; newLoan[0] = pv + feeTermination + feeApplication + feeSwitching;
        for ( var i = 1; i <= nper; i++ ){ // loop through each year

            currentLoan[i] = -FV(rate/pmtFreq, 1*pmtFreq, -pmt, currentLoan[i-1], type);

            if ( i <= newIntroNper ) { newLoan[i] = -FV(newIntroRate/pmtFreq, 1*pmtFreq, -newPmt, newLoan[i-1], type); }
            else { newLoan[i] = -FV(newRate/pmtFreq, 1*pmtFreq, -newPmt, newLoan[i-1], type); }

            //cost or savings
            cost[i] = currentLoan[i] - newLoan[i];
        }
    }
    else { // calculate graph based on new repayment amount
        currentLoan[0] = 0; newLoan[0] = feeTermination + feeApplication + feeSwitching;
        for ( var i = 1; i <= nper; i++ ){ // loop through each year

            // current loan
            if ( i <= introNper ) { currentLoan[i] = introPmt; }
            else { currentLoan[i] = pmt; }
            currentLoan[i] = currentLoan[i] * pmtFreq;
            currentLoan[i] = currentLoan[i] + currentLoan[i-1];

            // new loan
            if ( i <= newIntroNper ) { newLoan[i] = newIntroPmt; }
            else { newLoan[i] = newPmt; }
            newLoan[i] = newLoan[i] * pmtFreq;
            newLoan[i] = newLoan[i] + newLoan[i-1];

            //cost or savings
            cost[i] = currentLoan[i] - newLoan[i];
        }
    }

    html = '';
    if ( ( totalCost - newTotalCost ) > 0 && recoverSwitchCosts.replace(/[^0-9]/g,'').length > 0 ) {
        html = '<li>your switching costs will be recovered in '+recoverSwitchCosts +'</li>';
    }
    html = '<h4>Minimum repayments</h4>'+
        '<p>By switching loans and making the minimum repayment (' + newPmt.formatMoney(0) + ' per ' + pmtFreq.periodText() + '):</p>'+
        '<ul>'+
        '<li>will <span>'+( (totalCost-newTotalCost - totalSwitchingFees) < 0 ? 'cost ' : 'save ' )+parseFloat(Math.abs(totalCost-newTotalCost-totalSwitchingFees)).formatMoney(0)+
        '</span> ('+( ( Math.abs(totalCost-newTotalCost-totalSwitchingFees)/(nper*pmtFreq) ).formatMoney(0) )+' per '+pmtFreq.periodText()+') over the life of the loan</li>'+
        html+'</ul>';

    var timeSaved = parseFloat(nper * pmtFreq - newNperHigher).toFixed(6);
    // only this message if the new loan will save time
    if ( timeSaved > 0 && (totalCost-newTotalCost) > 0 ) {
        timeSaved = parseInt(timeSaved); // ignore the remainder
        html = html + '<h4 class="breaker">Higher repayments</h4>'+
            '<p>By switching loans and making higher repayments (' + pmt.formatMoney(0) + ' per '+ pmtFreq.periodText() + ', the same minimum repayments as your current loan):</p>'+
            '<ul>'+
            '<li>will <span>'+ ( (totalCost-newTotalCost) < 0 ? 'cost ' : 'save ' )+parseFloat(Math.abs( totalCost-newTotalCostHigher )).formatMoney(0)+'</span> '+
            '('+( ( Math.abs(totalCost-newTotalCostHigher)/(newNperHigher) ).formatMoney(0) )+' per '+pmtFreq.periodText()+') over the life of the loan</li>'+
            '<li>you will pay off your loan '+timeSaved + ' ' + pmtFreq.periodText() + 's '+(1?'earlier':'later')+'</li>'+
            '</ul>';
    }
    $('#result').html(html);
    if ( (totalCost-newTotalCost - totalSwitchingFees) < 0 ) { $('#result span').addClass('negative'); }
    drawChart( cost );
}

// PMT - returns the payment amount for a loan based on an interested rate and a constant payment schedule
function PMT(rate, nper, pv, fv, type) {
    var result;
    if (rate === 0) {
        result = (pv + fv) / nper;
    } else {
        var term = Math.pow(1 + rate, nper);
        if (type === 1) {
            result = (fv * rate / (term - 1) + pv * rate / (1 - 1 / term)) / (1 + rate);
        } else {
            result = fv * rate / (term - 1) + pv * rate / (1 - 1 / term);
        }
    }
    return -result;
}
// FV - returns the future value of an investent based on an interest rate and a constant payment schedule
function FV(rate, nper, pmt, pv, type) {
    var fv;
    if (rate === 0) {
        fv = pv + pmt * nper;
    } else {
        var term = Math.pow(1 + rate, nper);
        if (type === 1) {
            fv = pv * term + pmt * (1 + rate) * (term - 1.0) / rate;
        } else {
            fv = pv * term + pmt * (term - 1) / rate;
        }
    }
    return -fv;
}
// NPER - returns the number of periods for an investment based on an interest rate and a constant payment schedule
function NPER(rate, pmt, pv, fv, type) {
    if (type === undefined) { type = 0; }
    var num = pmt * (1 + rate * type) - fv * rate;
    var den = (pv * rate + pmt * (1 + rate * type));
    if ( rate === 0 ) { return -(fv + pv)/pmt; }
    else { return Math.log(num / den) / Math.log(1 + rate); }
}

//HTML
function DrawCalculator(){ // CALCULATOR FRAMEWORK HTML
    var html = '<h2>'+CALC_NAME+' calculator</h2>';
    $("#calculator-container").html(html);

    //input
    html = '<div class="break input"><h3>Current loan</h3>'+
        '<p><label for="pv">Loan balance: <span>($)</span></label><input type="text" id="pv" name="pv" class="dollars int empty"/></p>'+
        '<p><label for="rate">Interest rate: <span>(% p.a.)</span></label><input type="text" id="rate" class="interest float empty"/></p>'+
        '<p><label for="nper">Term remaining: <span>(years)</span></label><input type="text" id="nper" class="years int empty"/></p>'+
        '<p><label for="pmtFreq">Repayment frequency:</label><select id="pmtFreq"/></p>'+
        '<h4>Fees</h4>'+
        '<p><label for="fee">Regular fee: <span>($)</span></label><input type="text" id="fee" class="dollars int" value="$0"/></p>'+
        '<p><label for="feeFreq">Regular fee frequency:</label><select id="feeFreq"/></p>'+
        '<p><label for="feeTermination">Termination fee: <span>($)</span></label><input type="text" id="feeTermination" class="dollars int" value="$0"/></p>'+
        '<h3 class="breaker">New loan</h3>'+
        '<p><label for="newIntroRate">Introductory rate: <span>(% p.a.)</span></label><input type="text"  id="newIntroRate" class="interest float"/></p>'+
        '<p><label for="newIntroNper">Introductory period: <span>(years)</span></label><input type="text" id="newIntroNper" class="years int" value="0 years"/></p>'+
        '<p><label for="newRate">Ongoing rate: <span>(% p.a.)</span></label><input type="text" id="newRate" class="interest float empty"/></p>'+
        '<h4>Fees</h4>'+
        '<p><label for="feeApplication">Application fee: <span>($)</span></label><input type="text" id="feeApplication" class="dollars int" value="$0"/></p>'+
        '<p><label for="feeSwitching">Other switching fees: <span>($)</span></label><input type="text" id="feeSwitching" class="dollars int" value="$0"/></p>'+
        '<p><label for="newFee">Regular fee: <span>($)</span></label><input type="text"  id="newFee" class="dollars int" value="$0"/></p>'+
        '<p><label for="newFeeFreq">Regular fee frequency:</label><select id="newFeeFreq"/></p>'+
        '</div>';

    // result
    html = html + '<div class="break result">'+
        '<h3>Results</h3>'+
        '<div class="result-box"><!--<h4 id="chart-intro"/>--><div id="chart"/><div id="result"/></div>'+
        '</div>';

    $("#calculator-container").append(html);
}

function drawChart( data ){

    // conditional formatting
    for (var i = 0; i < data.length; i++) {
        var value = data[i], color = '#8b2d5c'; //'#6b8e06';
        //if (value < 0) { color = '#d00000'; }
        data[i] = { y: value, color: color };
    }
    var chart = new Highcharts.Chart({
        chart: { renderTo: 'chart', type: 'column', marginBottom: 35, marginTop: 0 },
        //colors: [ '#b92f92' ],
        credits: { enabled: false },
        legend: { enabled:false },
        //title: { text: 'Total cost/saving over time' },
        title: { text: null },
        xAxis: { min: 1, title: { text: 'Years' }, allowDecimals:false,  minPadding: 0, maxPadding: 0 },
        yAxis: { title: { text: 'Cost/Saving' }, endOnTick: false },
        plotOptions: {
            column: {
                stacking: 'normal',
                dataLabels: {
                    enabled: false,
                }
            },
            series: { borderWidth: 0, shadow: false, groupPadding: 0.1, pointPadding: 0.05 }
        },
        tooltip: {
            shared: true,
            useHTML: true,
            borderColor: '#6b8e06',
            formatter: function() {
                s = '<strong>After '+this.x+' years</strong><br/>Switching will have ';
                if ( this.points[0].y < 0 ) { s = s + 'cost you: '; }
                else { s = s + 'saved you: '; }
                s = s + this.points[0].y.formatMoney(0);
                return s;
            }
        },
        series: [{
            name: 'Cost/savings',
            data: data
        }]
    });
}

// GENERIC FUNCTIONS
function getVal(selector){
    var s = $(selector).val().toFloat();
    return s;
}
String.prototype.toFloat = function() {
    var s = this;
    s = s.replace(/[^0-9-.]/g, '');
    if ( isNaN(s) || s.length < 1 ) { s = 0; }
    return parseFloat(s);
};
Number.prototype.formatMoney = function(decPlaces, currencySymbol, thouSeparator, decSeparator) {
    // check the args and supply defaults:
    decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces;
    currencySymbol = currencySymbol === undefined ? "$" : currencySymbol;
    decSeparator = decSeparator === undefined ? "." : decSeparator;
    thouSeparator = thouSeparator === undefined ? "," : thouSeparator;

    var n = this,
        sign = n < 0 ? "-" : "",
        i = parseInt(n = Math.abs(+n || 0).toFixed(decPlaces)) + "",
        j = (j = i.length) > 3 ? j % 3 : 0;

    return sign + currencySymbol + (j ? i.substr(0, j) + thouSeparator : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thouSeparator) + (decPlaces ? decSeparator + Math.abs(n - i).toFixed(decPlaces).slice(2) : "");
};
Number.prototype.periodText = function() {
    p = this;
    p = p.toString();
    p = p.replace('52', 'week');
    p = p.replace('26', 'fortnight');
    p = p.replace('12', 'month');
    p = p.replace('1', 'year');
    return p;
};