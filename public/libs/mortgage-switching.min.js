function calculate() {
    if ($("input.empty").length > 0)return !1;
    var etp = getVal("#extraRepayment");
    var e, loan_amount = getVal("#pv"),
        interest_rate = getVal("#rate") / 100,
        loan_term = getVal("#nper"), repayment_frequency = getVal("#pmtFreq"),
        regular_fee = getVal("#fee"), regular_fee_freq = getVal("#feeFreq"),
        ternimation_fee = getVal("#feeTermination"),
        s = 0, application_fee = getVal("#feeApplication"), switching_fee = getVal("#feeSwitching"),
        new_fee = getVal("#newFee"), new_fee_freq = getVal("#newFeeFreq"),
        new_intro_rate = getVal("#newIntroRate") / 100,
        new_intro_nper = getVal("#newIntroNper"), new_rate = getVal("#newRate") / 100,
        y = loan_term - new_intro_nper, g = ternimation_fee + application_fee + switching_fee,
        m = 0, b = 0, w = $("#pmtFreq option:selected").text().toLowerCase().replace("ly", "s"),
        F = !1, x = PMT(interest_rate / repayment_frequency, loan_term * repayment_frequency, -loan_amount, m, b) + regular_fee * regular_fee_freq / repayment_frequency + etp,
        M = x * loan_term * repayment_frequency, T = loan_amount + g,
        V = PMT(new_intro_rate / repayment_frequency, loan_term * repayment_frequency, -T, m, b) + new_fee * new_fee_freq / repayment_frequency + etp,
        C = FV(new_intro_rate / repayment_frequency, new_intro_nper * repayment_frequency, V - new_fee * new_fee_freq / repayment_frequency, -T, b),
        k = PMT(new_rate / repayment_frequency, y * repayment_frequency, -C, m, b) + new_fee * new_fee_freq / repayment_frequency + etp,
        N = V * new_intro_nper * repayment_frequency + k * (loan_term - new_intro_nper) * repayment_frequency,
        I = 0;

    if ( new_intro_nper > 0 )for (_ = 1; new_intro_nper * repayment_frequency >= _; _++)if (_ * x - _ * V >= g) {
        I = _;
        break
    }
    if (0 === I)for (_ = 1; y * repayment_frequency >= _; _++)if (_ * x - _ * k >= g) {
        I = new_intro_nper * repayment_frequency + _;
        break
    }
    I = 0 >= M - N - g ? "negative" : g > 0 ? 0 === I ? "fee not recovered" : I + " " + w : "N/A";
    var A = PMT(new_intro_rate / repayment_frequency, loan_term * repayment_frequency, -T, m, b) + new_fee * new_fee_freq / repayment_frequency;
    x > A && (A = x);
    var R = FV(new_intro_rate / repayment_frequency, new_intro_nper * repayment_frequency, A, -T, b),
        q = PMT(new_rate / repayment_frequency, loan_term * repayment_frequency, -R, m, b) + new_fee * new_fee_freq / repayment_frequency;
    x > q && (q = x);
    var P = NPER(new_rate / repayment_frequency, q, -R, m, b);
    P += new_intro_nper * repayment_frequency;
    var S = parseInt(P.toFixed(6) / repayment_frequency), L = S + " years", D = Math.ceil(P.toFixed(6) / repayment_frequency % 1 * 12);
    D > 0 && (L = L + " " + D + " months"), 12 === D && (S += 1, D = 0);
    var E = A * new_intro_nper * repayment_frequency + q * (P - new_intro_nper * repayment_frequency), O = x;
    k > O && (O = k);
    var B = ('<p class="assumptions breaker"><strong>Assumptions:</strong></p><ul class="assumptions">' +
    '<li>Total cost of current loan: ' + M.formatMoney(2) + " (" + x.formatMoney() + " per " + repayment_frequency.periodText() + ")</li>" +
    "<li>Total cost of new loan: " + N.formatMoney(2) + " (" + V.formatMoney() + " introductory and " + k.formatMoney() + " ongoing per " + repayment_frequency.periodText() + ")</li>" +
    "</ul>", []);
    B[0] = 0;
    var H = [];
    H[0] = 0;
    var W = [];
    if (W[0] = 0, F) {
        k = O, B[0] = loan_amount, H[0] = loan_amount + ternimation_fee + application_fee + switching_fee;
        for (var _ = 1; loan_term >= _; _++)B[_] = -FV(interest_rate / repayment_frequency, 1 * repayment_frequency, -x, B[_ - 1], b), H[_] = new_intro_nper >= _ ? -FV(new_intro_rate / repayment_frequency, 1 * repayment_frequency, -k, H[_ - 1], b) : -FV(new_rate / repayment_frequency, 1 * repayment_frequency, -k, H[_ - 1], b), W[_] = B[_] - H[_]
    } else {
        B[0] = 0, H[0] = ternimation_fee + application_fee + switching_fee;
        for (var _ = 1; loan_term >= _; _++)B[_] = s >= _ ? introPmt : x, B[_] = B[_] * repayment_frequency, B[_] = B[_] + B[_ - 1], H[_] = new_intro_nper >= _ ? V : k, H[_] = H[_] * repayment_frequency, H[_] = H[_] + H[_ - 1], W[_] = B[_] - H[_]
    }
    e = "", M - N > 0 && I.replace(/[^0-9]/g, "").length > 0 && (e = "<li>your switching costs will be recovered in " + I + "</li>"),
        e = "<h4>Minimum repayments</h4><p>By switching loans and making the minimum repayment (" + k.formatMoney(0) + " per " + repayment_frequency.periodText() + "):</p>" +
            "<ul><li>will <span>" + (0 > M - N - g ? "cost " : "save ") + parseFloat(Math.abs(M - N - g)).formatMoney(0) + "</span> " +
            "(" + (Math.abs(M - N - g) / (loan_term * repayment_frequency)).formatMoney(0) + " per " + repayment_frequency.periodText() + ") over the life of the loan</li>" +
            e + "</ul>";
    var Y = parseFloat(loan_term * repayment_frequency + etp - P).toFixed(6);
    Y > 0 && M + etp - N > 0 && (Y = parseInt(Y),
        e = e + '<h4 class="breaker">Higher repayments</h4><p>By switching loans and making higher repayments (' +
            x.formatMoney(0) + " per " + repayment_frequency.periodText() + ", the same minimum repayments as your current loan):</p>" +
            "<ul><li>will <span>" + (0 > M - N ? "cost " : "save ") + parseFloat(Math.abs(M - E)).formatMoney(0) +
            "</span> (" + (Math.abs(M - E) / P).formatMoney(0) + " per " + repayment_frequency.periodText() + ") over the life of the loan</li>" +
            "<li>you will pay off your loan " + Y + " " + repayment_frequency.periodText() + "s earlier</li></ul>"),
        $("#result").html(e), 0 > M - N - g && $("#result span").addClass("negative"), drawChart(W)
}
function PMT(e, loan_amount, interest_rate, loan_term, repayment_frequency) {
    var regular_fee;
    if (0 === e)regular_fee = (interest_rate + loan_term) / loan_amount; else {
        var regular_fee_freq = Math.pow(1 + e, loan_amount);
        regular_fee = 1 === repayment_frequency ? (loan_term * e / (regular_fee_freq - 1) + interest_rate * e / (1 - 1 / regular_fee_freq)) / (1 + e) : loan_term * e / (regular_fee_freq - 1) + interest_rate * e / (1 - 1 / regular_fee_freq)
    }
    return -regular_fee
}
function FV(e, loan_amount, interest_rate, loan_term, repayment_frequency) {
    var regular_fee;
    if (0 === e)regular_fee = loan_term + interest_rate * loan_amount; else {
        var regular_fee_freq = Math.pow(1 + e, loan_amount);
        regular_fee = 1 === repayment_frequency ? loan_term * regular_fee_freq + interest_rate * (1 + e) * (regular_fee_freq - 1) / e : loan_term * regular_fee_freq + interest_rate * (regular_fee_freq - 1) / e
    }
    return -regular_fee
}
function NPER(e, loan_amount, interest_rate, loan_term, repayment_frequency) {
    void 0 === repayment_frequency && (repayment_frequency = 0);
    var regular_fee = loan_amount * (1 + e * repayment_frequency) - loan_term * e, regular_fee_freq = interest_rate * e + loan_amount * (1 + e * repayment_frequency);
    return 0 === e ? -(loan_term + interest_rate) / loan_amount : Math.log(regular_fee / regular_fee_freq) / Math.log(1 + e)
}
function DrawCalculator() {
    var e = "<h2>" + CALC_NAME + " calculator</h2>";
    $("#calculator-container").html(e), e = '<div class="break input"><h3>Current loan</h3><p><label for="pv">Loan balance: <span>($)</span></label><input type="text" id="pv" name="pv" class="dollars int empty"/></p><p><label for="rate">Interest rate: <span>(% p.a.)</span></label><input type="text" id="rate" class="interest float empty"/></p><p><label for="nper">Term remaining: <span>(years)</span></label><input type="text" id="nper" class="years int empty"/></p><p><label for="pmtFreq">Repayment frequency:</label><select id="pmtFreq"/></p><h4>Fees</h4><p><label for="fee">Regular fee: <span>($)</span></label><input type="text" id="fee" class="dollars int" value="$0"/></p><p><label for="feeFreq">Regular fee frequency:</label><select id="feeFreq"/></p><p><label for="feeTermination">Termination fee: <span>($)</span></label><input type="text" id="feeTermination" class="dollars int" value="$0"/></p><h3 class="breaker">New loan</h3><p><label for="newIntroRate">Introductory rate: <span>(% p.a.)</span></label><input type="text"  id="newIntroRate" class="interest float"/></p><p><label for="newIntroNper">Introductory period: <span>(years)</span></label><input type="text" id="newIntroNper" class="years int" value="0 years"/></p><p><label for="newRate">Ongoing rate: <span>(% p.a.)</span></label><input type="text" id="newRate" class="interest float empty"/></p><h4>Fees</h4><p><label for="feeApplication">Application fee: <span>($)</span></label><input type="text" id="feeApplication" class="dollars int" value="$0"/></p><p><label for="feeSwitching">Other switching fees: <span>($)</span></label><input type="text" id="feeSwitching" class="dollars int" value="$0"/></p><p><label for="newFee">Regular fee: <span>($)</span></label><input type="text"  id="newFee" class="dollars int" value="$0"/></p><p><label for="newFeeFreq">Regular fee frequency:</label><select id="newFeeFreq"/></p><p><label for="extraRepayment">Extra monthly repayment: <span>($)</span></label><input type="text" id="extraRepayment" class="dollars int" value="$100" /></p></div>', e += '<div class="break result"><h3>Results</h3><div class="result-box"><!--<h4 id="chart-intro"/>--><div id="chart"/><div id="result"/></div></div>', $("#calculator-container").append(e)
}
function drawChart(e) {
    for (var loan_amount = 0; loan_amount < e.length; loan_amount++) {
        var interest_rate = e[loan_amount], loan_term = "#8b2d5c";
        e[loan_amount] = {y: interest_rate, color: loan_term}
    }
    new Highcharts.Chart({
        chart: {renderTo: "chart", type: "column", marginBottom: 35, marginTop: 0},
        credits: {enabled: !1},
        legend: {enabled: !1},
        title: {text: null},
        xAxis: {min: 1, title: {text: "Years"}, allowDecimals: !1, minPadding: 0, maxPadding: 0},
        yAxis: {title: {text: "Cost/Saving"}, endOnTick: !1},
        plotOptions: {
            column: {stacking: "normal", dataLabels: {enabled: !1}},
            series: {borderWidth: 0, shadow: !1, groupPadding: .1, pointPadding: .05}
        },
        tooltip: {
            shared: !0, useHTML: !0, borderColor: "#6b8e06", formatter: function () {
                return s = "<strong>After " + this.x + " years</strong><br/>Switching will have ", s += this.points[0].y < 0 ? "cost you: " : "saved you: ", s += this.points[0].y.formatMoney(0), s
            }
        },
        series: [{name: "Cost/savings", data: e}]
    })
}
function getVal(e) {
    var loan_amount = $(e).val().toFloat();
    return loan_amount
}
var CALC_NAME = "Mortgage switching";
$(document).ready(function () {
    var e = (DrawCalculator(), '<option value="52">Weekly</option><option value="26">Fortnightly</option><option value="12" selected="selected">Monthly</option><option value="1">Annually</option>');
    $("#calculator-container .input select").html(e), $("#calculator-container .input .current input, #calculator-container .input .current select").each(function () {
        $(this).before("<label>Current loan - " + $(this).parent("application_fee").prev("application_fee").text() + "</label>")
    }), $("#calculator-container .input .new input, #calculator-container .input .new select").each(function () {
        $(this).before("<label>New loan - " + $(this).parent("application_fee").prev("application_fee").prev("application_fee").text() + "</label>")
    }), $("#calculator-container input").attr("type", "tel"), $("input").on("keypress", function (e) {
        13 == e.keyCode && $(this).blur()
    }), $("#calculator-container input").focus(function () {
        this.select()
    }), $("#calculator-container input").mouseup(function (e) {
        e.preventDefault()
    }), $("#calculator-container input").blur(function () {
        if (this.value.length < 1 && $(this).val(0), $(this).hasClass("dollars") && $(this).val(this.value.toFloat().formatMoney(0)), $(this).hasClass("interest")) {
            var e = $(this).val().toFloat();
            e > 15 && (e = 15), $(this).val(e.toFixed(2) + "%")
        }
        $(this).hasClass("years") && $(this).val(parseInt(this.value) + " years"), "nper" == this.id && getVal("#nper") > 30 && $(this).val("30 years"), "newIntroNper" == this.id && getVal("#nper") <= getVal("#newIntroNper") && $(this).val(getVal("#nper") - 1 + " years"), calculate()
    }), $('#calculator-container select, #calculator-container input[type="checkbox"]').change(function () {
        calculate()
    }), $("input.int").keyup(function () {
        this.value = this.value.replace(/[^0-9]/g, "")
    }), $("input.float").keyup(function () {
        this.value = this.value.replace(/[^0-9\.]/g, "")
    }), $("#calculator-container input").focus(function () {
        this.select(), $(this).removeClass("empty")
    }), $("#result button").on("click", function () {
        $("#result table").slideToggle()
    })
}), String.prototype.toFloat = function () {
    var e = this;
    return e = e.replace(/[^0-9-.]/g, ""), (isNaN(e) || e.length < 1) && (e = 0), parseFloat(e)
}, Number.prototype.formatMoney = function (e, loan_amount, interest_rate, loan_term) {
    e = isNaN(e = Math.abs(e)) ? 2 : e, loan_amount = void 0 === loan_amount ? "$" : loan_amount, loan_term = void 0 === loan_term ? "." : loan_term, interest_rate = void 0 === interest_rate ? "," : interest_rate;
    var repayment_frequency = this, regular_fee = 0 > repayment_frequency ? "-" : "", regular_fee_freq = parseInt(repayment_frequency = Math.abs(+repayment_frequency || 0).toFixed(e)) + "", ternimation_fee = (ternimation_fee = regular_fee_freq.length) > 3 ? ternimation_fee % 3 : 0;
    return regular_fee + loan_amount + (ternimation_fee ? regular_fee_freq.substr(0, ternimation_fee) + interest_rate : "") + regular_fee_freq.substr(ternimation_fee).replace(/(\new_intro_nper{3})(?=\new_intro_nper)/g, "$1" + interest_rate) + (e ? loan_term + Math.abs(repayment_frequency - regular_fee_freq).toFixed(e).slice(2) : "")
}, Number.prototype.periodText = function () {
    return application_fee = this, application_fee = application_fee.toString(), application_fee = application_fee.replace("52", "week"), application_fee = application_fee.replace("26", "fortnight"), application_fee = application_fee.replace("12", "month"), application_fee = application_fee.replace("1", "year"), application_fee
};